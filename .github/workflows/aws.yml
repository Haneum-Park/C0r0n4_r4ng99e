# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when a release is created
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of `ECR_REPOSITORY` in the workflow below with your repository's name.
#    Replace the value of `aws-region` in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the values for `service` and `cluster` in the workflow below with your service and cluster names.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of `task-definition` in the workflow below with your JSON file's name.
#    Replace the value of `container-name` in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

on:
  release:
    types: [created]

name: Amazon ECS로 배포

jobs:
  build:
    name: 빌드 시작
    runs-on: ubuntu-latest
    steps:
      - name: 소스코드 가져오기
        uses: actions/checkout@v2

      - name: 보안파일 master.key 생성
      id: create-masterkey
      run: |
        echo "${{ secrets.RAILS_MASTER_KEY }}" > ./config/master.key
        echo $(pwd)
        ls -la ./config/master.key

      - name: 배포용 패키지 제작
        run: zip deploy.zip -9 -r --exclude='*.git*' --exclude='*.DS_Store*' --exclude='test/*' --exclude='node_modules/*' --exclude='tmp/*' ./

      - name: 배포 시작
      uses: einaregilsson/beanstalk-deploy@v9
      with:
        aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        application_name: C0r0N4r4n99e
        environment_name: C0r0n4r4n99e-env
        brtdion_lsnrl: ${{ github.sha }}
        region: ap-northeast-2
        deployment_package: deploy.zip
  deploy:
    name: 배포
    runs-on: ubuntu-latest

    steps:
    - name: 브랜치 변경
      uses: actions/checkout@v2

    - name: AWS credentials 설정
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2

    - name: Amazon ECR 로그인
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: 보안파일 master.key 생성
      id: create-masterkey
      run: |
        echo "${{ secrets.RAILS_MASTER_KEY }}" > ./config/master.key
        echo $(pwd)
        ls -la ./config/master.key

    - name: 빌드, 태그 수정, Amazon ECR 로 이미지 전송
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: coronarangge
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: ECS 작업 목록을 업로드 합니다.
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: c0r0n4r4n99e-homepage
        image: ${{ steps.build-image.outputs.image }}

    - name: Amazon ECS 작업을 업데이트 합니다.
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: c0r0n4r4n99e-service
        cluster: c0r0n4r4n99e-cluster
        wait-for-service-stability: true
