upstream app_server {
    # fail_timeout=0 means we always retry an upstream even if it failed
    # to return a good HTTP response (in case the unicorn master nukes a
    # single worker for timing out).

    # for UNIX domain socket setups:
    server unix:/app/tmp/sockets/.unicorn.socket;

    # for TCP setups, point these to your backend servers
    # server 192.168.0.7:8080 fail_timeout=0;
    # server 192.168.0.8:8080 fail_timeout=0;
    # server 192.168.0.9:8080 fail_timeout=0;
}


server {
    listen 80;
    listen [::]:80;
		root /app/public;

		server_name localhost;

		client_max_body_size 4G;
		keepalive_timeout 5;


    server_name c0r0n4r4n99e;
    try_files $uri/index.html $uri.html $uri @app;

    location @app {
      # an HTTP header important enough to have its own Wikipedia entry:
      #   https://en.wikipedia.org/wiki/X-Forwarded-For
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

      # enable this if you forward HTTPS traffic to unicorn,
      # this helps Rack set the proper URL scheme for doing redirects:
      # proxy_set_header X-Forwarded-Proto $scheme;

      # pass the Host: header from the client right along so redirects
      # can be set properly within the Rack application
      proxy_set_header Host $http_host;

      # we don't want nginx trying to do something clever with
      # redirects, we set the Host: header above already.
      proxy_redirect off;

      # It's also safe to set if you're using only serving fast clients
      # with unicorn + nginx, but not slow clients.  You normally want
      # nginx to buffer responses to slow clients, even with Rails 3.1
      # streaming because otherwise a slow client can become a bottleneck
      # of unicorn.
      #
      # The Rack application may also set "X-Accel-Buffering (yes|no)"
      # in the response headers do disable/enable buffering on a
      # per-response basis.
      # proxy_buffering off;

      proxy_pass http://app_server;
    }

		# Rails error pages
    error_page 500 502 503 504 /500.html;
    location = /500.html {
      root /app/public;
    }
}

# server {
#     listen 443 ssl;

#     root [web root directory path];
#     index index.html index.htm;

#     server_name [domain name];

#     # SSL Setting below
#     ...
#     # SSL Setting above

#     location / {
#         try_files $uri $uri/ =404;
#     }

#     location /api {
#         ...
#     }

#     # SSL Setting (Let's Encrypt)
#     location ~ /.well-known {
#             allow all;
#     }
# }
